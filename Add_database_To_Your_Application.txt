How we connect database to Web Application(MVC):
Step 1: Download Microsoft SQL server management.
Step 2: Open Microsoft SQL server management.
Step 3: Server Type: database engine.
Server Name: DESKTOP-1LKGFVL
Authentication: Window Authentication.
then connect.

Step 4: Right click on Database> New Databases..>Enter database name then OK.

Step 5: Create web APplication(mvc).
Step 6: Open appsettings.json file and copy the below code.
"ConnectionStrings": {
    "DefaultConnection": "Server=DESKTOP-1LKGFVL;Database=TestingDatabase;user id=DESKTOP-1LKGFVL\\Dell;password=;Trusted_Connection=true;Encrypt=false;;MultipleActiveResultSets=true;"
  }

Set all parameter according to your needs.


Step 7: Open Startup.cs file and copy below code.

using DatabaseConnectionDemo.dbModels;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DatabaseConnectionDemo
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
@@@@@@@@code you want to add in your code@@@@@@@@@@@@@@@@@@@@@@@@
            services.AddDbContext<dbContext>(options =>
            options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

            dbContext.ConnectionString = Configuration.GetConnectionString("DefaultConnection");
@@@@@@@code end@@@@@@@@@@@@@@@@@

            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}



If Startup.cs is not persent but program.cs file is there then you have to add below code.

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using zzootaAdminApp.dbModels;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();
@@@@@@@@code you want to add in your code@@@@@@@@@@@@@@@@@@@@@@@@

builder.Services.AddDbContext<dbcontext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});
dbcontext.ConnectionString = builder.Configuration.GetConnectionString("DefaultConnection");
@@@@@@@code end@@@@@@@@@@@@@@@@@
var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();





Step 8: Create new folder name it dbModels, inside it create two file named tables.cs and dbContext.cs.

Step 9: Code you want to add in your dbContext.cs:

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DatabaseConnectionDemo.dbModels
{
    public class dbContext : DbContext
    {
        public dbContext(DbContextOptions<dbContext> options) : base(options)
        {
        }

        public dbContext()
        {
        }

        public static string ConnectionString { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(ConnectionString);
            }
        }

        //Tables

        public DbSet<Country> Country { get; set; }
       

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Country>().ToTable("Country");
           

        }

    }
}



Code you want to code in your Tables.cs:

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace DatabaseConnectionDemo.dbModels
{
    public class Country
    {
        [Key]
        public int CountryId { set; get; }
        public string CountryName { set; get; }
        public string Timezone { set; get; }
        public int PhoneCode { set; get; }
        public DateTime Addedon { set; get; }
        public string AddedBy { set; get; }
        public DateTime UpdatedOn { set; get; }
        public string UpdatedBy { set; get; }
        public bool Deleted { set; get; }
        public bool Archived { set; get; }
        public int TestId { set; get; }

        //Relation with User

    }
}



Step 10: Add below package from Tools menu> nuget Package manager> Manage nuget packages for Solution...
If your applcation is .net 3.1 then install 3.1.3 version otherwise latest.

Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Tools
Microsoft.EntityFrameworkCore.SqlServer


Step 11: Perform the below command 
Add-Migration Any_Name_To_your_migration
update-database -context dbContext



